kube-prometheus-stack:
  # Global settings
  global:
    imageRegistry: ""
    imagePullSecrets: []
  
  # Prometheus configuration
  prometheus:
    enabled: true
    
    prometheusSpec:
      # Image settings
      image:
        repository: quay.io/prometheus/prometheus
        tag: v2.45.0
      
      # Resource limits
      resources:
        limits:
          cpu: 1000m
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 1Gi
      
      # Storage configuration
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: do-block-storage
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 20Gi
      
      # Retention
      retention: 30d
      retentionSize: 18GB
      
      # Security context
      securityContext:
        runAsUser: 1000
        runAsGroup: 2000
        fsGroup: 2000
      
      # Service Monitor selector (enable all namespaces)
      serviceMonitorSelectorNilUsesHelmValues: false
      serviceMonitorSelector: {}
      serviceMonitorNamespaceSelector: {}
      
      # Pod Monitor selector
      podMonitorSelectorNilUsesHelmValues: false
      podMonitorSelector: {}
      podMonitorNamespaceSelector: {}
      
      # Rule selector
      ruleSelectorNilUsesHelmValues: false
      ruleSelector: {}
      ruleNamespaceSelector: {}
      
      # Anti-affinity for HA
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: prometheus
              topologyKey: kubernetes.io/hostname
      
      # Additional scrape configs
      additionalScrapeConfigs:
        - job_name: 'argocd-metrics'
          static_configs:
            - targets: ['argocd-metrics.argocd.svc.cluster.local:8082']
        
        - job_name: 'argocd-server-metrics'
          static_configs:
            - targets: ['argocd-server-metrics.argocd.svc.cluster.local:8083']
        
        - job_name: 'argocd-repo-server-metrics'
          static_configs:
            - targets: ['argocd-repo-server.argocd.svc.cluster.local:8084']
    
    # Service configuration
    service:
      type: ClusterIP
      port: 9090
    
    # Ingress configuration
    ingress:
      enabled: true
      ingressClassName: nginx
      hosts:
        - prometheus.hashfoundry.local
      tls:
        - secretName: prometheus-tls
          hosts:
            - prometheus.hashfoundry.local

  # Alertmanager configuration
  alertmanager:
    enabled: false
    
  # Grafana configuration (disable as we have separate Grafana)
  grafana:
    enabled: false
    
  # Node Exporter
  nodeExporter:
    enabled: true
    
  # Kube State Metrics
  kubeStateMetrics:
    enabled: true
    
  # Prometheus Operator
  prometheusOperator:
    enabled: true
    
    # Admission webhooks (disable for simplicity)
    admissionWebhooks:
      enabled: false
      patch:
        enabled: false
    
    # TLS configuration
    tls:
      enabled: false
    
    # ServiceMonitor for operator itself
    serviceMonitor:
      enabled: true
  
  # Default rules
  defaultRules:
    create: true
    rules:
      alertmanager: false
      etcd: true
      configReloaders: true
      general: true
      k8s: true
      kubeApiserver: true
      kubeApiserverAvailability: true
      kubeApiserverSlos: true
      kubelet: true
      kubeProxy: true
      kubePrometheusGeneral: true
      kubePrometheusNodeRecording: true
      kubernetesApps: true
      kubernetesResources: true
      kubernetesStorage: true
      kubernetesSystem: true
      network: true
      node: true
      nodeExporterAlerting: true
      nodeExporterRecording: true
      prometheus: true
      prometheusOperator: true

# Additional monitoring configurations will be managed by separate charts
# Disabled custom ServiceMonitors and PrometheusRules for now to prevent template errors

# ServiceMonitors - Disabled (to be managed by kube-prometheus-stack CRDs)
serviceMonitors: {}
#  nfs-exporter:
#    enabled: false

# PrometheusRules - Disabled (to be managed by kube-prometheus-stack CRDs)  
prometheusRules: {}
#  hashfoundry-alerts:
#    enabled: false

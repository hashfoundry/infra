prometheus:
  # Prometheus server configuration
  server:
    enabled: true
    image:
      repository: prom/prometheus
      tag: v2.45.0
    
    # Resource limits
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
    
    # Persistence
    persistentVolume:
      enabled: true
      size: 20Gi
      storageClass: "do-block-storage"
      accessModes:
        - ReadWriteOnce
    
    # Retention
    retention: "30d"
    
    # Service configuration
    service:
      type: ClusterIP
      port: 9090
    
    # Ingress
    ingress:
      enabled: true
      ingressClassName: nginx
      hosts:
        - prometheus.hashfoundry.local
      tls:
        - secretName: prometheus-tls
          hosts:
            - prometheus.hashfoundry.local
    
    # Security context
    securityContext:
      runAsUser: 65534
      runAsGroup: 65534
      fsGroup: 65534
    
    # Anti-affinity for HA
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: prometheus
            topologyKey: kubernetes.io/hostname

  # AlertManager integration
  alertmanager:
    enabled: false
    
  # Node exporter
  nodeExporter:
    enabled: true
    
  # Kube state metrics
  kubeStateMetrics:
    enabled: true
    
  # Pushgateway
  pushgateway:
    enabled: false

  # Additional scrape configs (chart provides defaults)
  extraScrapeConfigs: |
    # ArgoCD metrics
    - job_name: 'argocd-metrics'
      static_configs:
        - targets: ['argocd-metrics.argocd.svc.cluster.local:8082']
    
    - job_name: 'argocd-server-metrics'
      static_configs:
        - targets: ['argocd-server-metrics.argocd.svc.cluster.local:8083']
    
    - job_name: 'argocd-repo-server-metrics'
      static_configs:
        - targets: ['argocd-repo-server.argocd.svc.cluster.local:8084']
    
    # NGINX Ingress metrics
    - job_name: 'nginx-ingress'
      kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
              - ingress-nginx
      relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
          action: keep
          regex: ingress-nginx
        - source_labels: [__meta_kubernetes_pod_container_port_number]
          action: keep
          regex: "10254"
    
    # NFS Exporter metrics
    - job_name: 'nfs-exporter'
      static_configs:
        - targets: ['nfs-exporter.monitoring.svc.cluster.local:9100']
      scrape_interval: 30s
      scrape_timeout: 10s
      metrics_path: /metrics

  # Alert rules
  serverFiles:
    alerts.yml:
      groups:
        - name: kubernetes-alerts
          rules:
            - alert: KubernetesNodeReady
              expr: kube_node_status_condition{condition="Ready",status="true"} == 0
              for: 10m
              labels:
                severity: critical
              annotations:
                summary: Kubernetes Node not ready
                description: "Node {{ $labels.node }} has been unready for more than 10 minutes."
            
            - alert: KubernetesPodCrashLooping
              expr: increase(kube_pod_container_status_restarts_total[1h]) > 5
              for: 0m
              labels:
                severity: warning
              annotations:
                summary: Kubernetes pod crash looping
                description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} is crash looping."
            
            - alert: KubernetesNodeMemoryPressure
              expr: kube_node_status_condition{condition="MemoryPressure",status="true"} == 1
              for: 2m
              labels:
                severity: critical
              annotations:
                summary: Kubernetes Node memory pressure
                description: "Node {{ $labels.node }} has MemoryPressure condition."
            
            - alert: KubernetesNodeDiskPressure
              expr: kube_node_status_condition{condition="DiskPressure",status="true"} == 1
              for: 2m
              labels:
                severity: critical
              annotations:
                summary: Kubernetes Node disk pressure
                description: "Node {{ $labels.node }} has DiskPressure condition."
        
        - name: argocd-alerts
          rules:
            - alert: ArgoCDAppNotSynced
              expr: argocd_app_info{sync_status!="Synced"} == 1
              for: 15m
              labels:
                severity: warning
              annotations:
                summary: ArgoCD application not synced
                description: "Application {{ $labels.name }} in project {{ $labels.project }} is not synced."
            
            - alert: ArgoCDAppUnhealthy
              expr: argocd_app_info{health_status!="Healthy"} == 1
              for: 15m
              labels:
                severity: critical
              annotations:
                summary: ArgoCD application unhealthy
                description: "Application {{ $labels.name }} in project {{ $labels.project }} is unhealthy."
        
        - name: nfs-alerts
          rules:
            - alert: NFSExporterDown
              expr: up{job="nfs-exporter"} == 0
              for: 5m
              labels:
                severity: critical
              annotations:
                summary: NFS Exporter is down
                description: "NFS Exporter has been down for more than 5 minutes."
            
            - alert: FilesystemSpaceUsageHigh
              expr: (node_filesystem_size_bytes{job="nfs-exporter"} - node_filesystem_avail_bytes{job="nfs-exporter"}) / node_filesystem_size_bytes{job="nfs-exporter"} * 100 > 80
              for: 10m
              labels:
                severity: warning
              annotations:
                summary: Filesystem space usage is high
                description: "Filesystem {{ $labels.mountpoint }} on {{ $labels.instance }} is {{ $value }}% full."
            
            - alert: FilesystemSpaceUsageCritical
              expr: (node_filesystem_size_bytes{job="nfs-exporter"} - node_filesystem_avail_bytes{job="nfs-exporter"}) / node_filesystem_size_bytes{job="nfs-exporter"} * 100 > 90
              for: 5m
              labels:
                severity: critical
              annotations:
                summary: Filesystem space usage is critical
                description: "Filesystem {{ $labels.mountpoint }} on {{ $labels.instance }} is {{ $value }}% full."
            
            - alert: FilesystemInodesUsageHigh
              expr: (node_filesystem_files{job="nfs-exporter"} - node_filesystem_files_free{job="nfs-exporter"}) / node_filesystem_files{job="nfs-exporter"} * 100 > 80
              for: 10m
              labels:
                severity: warning
              annotations:
                summary: Filesystem inodes usage is high
                description: "Filesystem {{ $labels.mountpoint }} on {{ $labels.instance }} has {{ $value }}% inodes used."

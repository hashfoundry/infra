#!/bin/bash
# –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç KServe ML Deployment

set -e

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KServe ML Deployment..."
echo "========================================"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v kubectl &> /dev/null; then
        log_error "kubectl –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    if ! command -v curl &> /dev/null; then
        log_error "curl –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã"
}

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
check_infrastructure() {
    log_info "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ KServe –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ KServe system
    if ! kubectl get pods -n kserve-system --no-headers 2>/dev/null | grep -v Running | grep -v Completed; then
        log_success "KServe —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "–ü—Ä–æ–±–ª–µ–º—ã —Å KServe —Å–∏—Å—Ç–µ–º–æ–π"
        kubectl get pods -n kserve-system
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Knative Serving
    if ! kubectl get pods -n knative-serving --no-headers 2>/dev/null | grep -v Running | grep -v Completed; then
        log_success "Knative Serving —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "–ü—Ä–æ–±–ª–µ–º—ã —Å Knative Serving"
        kubectl get pods -n knative-serving
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Istio
    if ! kubectl get pods -n istio-system --no-headers 2>/dev/null | grep -v Running | grep -v Completed; then
        log_success "Istio —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_error "–ü—Ä–æ–±–ª–µ–º—ã —Å Istio"
        kubectl get pods -n istio-system
        return 1
    fi
}

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ InferenceService
check_inference_service() {
    log_info "2. –ü—Ä–æ–≤–µ—Ä–∫–∞ InferenceService..."
    
    local namespace=${1:-ml-models}
    local service_name=${2:-iris-classifier}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è InferenceService
    if kubectl get inferenceservice $service_name -n $namespace &> /dev/null; then
        log_success "InferenceService '$service_name' –Ω–∞–π–¥–µ–Ω"
    else
        log_error "InferenceService '$service_name' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ namespace '$namespace'"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ready
    local ready_status=$(kubectl get inferenceservice $service_name -n $namespace -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' 2>/dev/null)
    if [[ "$ready_status" == "True" ]]; then
        log_success "InferenceService –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
    else
        log_error "InferenceService –Ω–µ –≥–æ—Ç–æ–≤. –°—Ç–∞—Ç—É—Å: $ready_status"
        kubectl describe inferenceservice $service_name -n $namespace
        return 1
    fi
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ URL
    local url=$(kubectl get inferenceservice $service_name -n $namespace -o jsonpath='{.status.url}' 2>/dev/null)
    if [[ -n "$url" ]]; then
        log_success "URL InferenceService: $url"
        echo "INFERENCE_URL=$url" > /tmp/inference_url.env
    else
        log_warning "URL InferenceService –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Ingress –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
check_ingress() {
    log_info "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Ingress –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏..."
    
    local ingress_url=${1:-"https://iris-classifier.ml.hashfoundry.local"}
    local model_name=${2:-"iris-classifier"}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏..."
    local metadata_url="$ingress_url/v1/models/$model_name"
    
    if curl -f -k -s "$metadata_url" > /dev/null; then
        log_success "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"
        curl -k -s "$metadata_url" | jq . 2>/dev/null || curl -k -s "$metadata_url"
    else
        log_error "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: $metadata_url"
        return 1
    fi
}

# 4. –¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
test_prediction() {
    log_info "4. –¢–µ—Å—Ç ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è..."
    
    local ingress_url=${1:-"https://iris-classifier.ml.hashfoundry.local"}
    local model_name=${2:-"iris-classifier"}
    
    local predict_url="$ingress_url/v1/models/$model_name:predict"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    local test_cases=(
        '{"instances": [[5.1, 3.5, 1.4, 0.2]]}|setosa|0'
        '{"instances": [[6.2, 2.9, 4.3, 1.3]]}|versicolor|1'
        '{"instances": [[7.3, 2.9, 6.3, 1.8]]}|virginica|2'
    )
    
    local all_tests_passed=true
    
    for test_case in "${test_cases[@]}"; do
        IFS='|' read -r payload species expected_class <<< "$test_case"
        
        log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è $species..."
        
        local start_time=$(date +%s%3N)
        local response=$(curl -k -s -X POST \
            "$predict_url" \
            -H "Content-Type: application/json" \
            -d "$payload" 2>/dev/null)
        local end_time=$(date +%s%3N)
        local latency=$((end_time - start_time))
        
        if [[ -n "$response" ]] && echo "$response" | grep -q "predictions"; then
            local predicted_class=$(echo "$response" | jq -r '.predictions[0]' 2>/dev/null)
            
            if [[ "$predicted_class" == "$expected_class" ]]; then
                log_success "$species: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–∫–ª–∞—Å—Å $predicted_class, ${latency}ms)"
            else
                log_error "$species: –ù–µ–≤–µ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –û–∂–∏–¥–∞–ª—Å—è $expected_class, –ø–æ–ª—É—á–µ–Ω $predicted_class"
                all_tests_passed=false
            fi
        else
            log_error "$species: –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API"
            echo "Response: $response"
            all_tests_passed=false
        fi
    done
    
    if [[ "$all_tests_passed" == "true" ]]; then
        log_success "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
        return 1
    fi
}

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
test_performance() {
    log_info "5. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
    
    local ingress_url=${1:-"https://iris-classifier.ml.hashfoundry.local"}
    local model_name=${2:-"iris-classifier"}
    local num_requests=${3:-10}
    
    local predict_url="$ingress_url/v1/models/$model_name:predict"
    local payload='{"instances": [[5.1, 3.5, 1.4, 0.2]]}'
    
    local total_time=0
    local successful_requests=0
    local failed_requests=0
    
    log_info "–û—Ç–ø—Ä–∞–≤–∫–∞ $num_requests –∑–∞–ø—Ä–æ—Å–æ–≤..."
    
    for ((i=1; i<=num_requests; i++)); do
        local start_time=$(date +%s%3N)
        local response=$(curl -k -s -X POST \
            "$predict_url" \
            -H "Content-Type: application/json" \
            -d "$payload" 2>/dev/null)
        local end_time=$(date +%s%3N)
        local latency=$((end_time - start_time))
        
        if [[ -n "$response" ]] && echo "$response" | grep -q "predictions"; then
            ((successful_requests++))
            total_time=$((total_time + latency))
        else
            ((failed_requests++))
        fi
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        if ((i % 5 == 0)); then
            echo -n "."
        fi
    done
    echo ""
    
    if ((successful_requests > 0)); then
        local avg_latency=$((total_time / successful_requests))
        local success_rate=$((successful_requests * 100 / num_requests))
        
        log_success "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:"
        echo "  - –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: $successful_requests/$num_requests ($success_rate%)"
        echo "  - –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${avg_latency}ms"
        
        if ((avg_latency <= 100)); then
            log_success "–ó–∞–¥–µ—Ä–∂–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é (<100ms)"
        else
            log_warning "–ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ (>100ms)"
        fi
        
        if ((success_rate >= 95)); then
            log_success "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é (‚â•95%)"
        else
            log_error "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –Ω–∏–∂–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (<95%)"
            return 1
        fi
    else
        log_error "–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
        return 1
    fi
}

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
check_monitoring() {
    log_info "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫..."
    
    local prometheus_url=${1:-"http://prometheus.hashfoundry.local"}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Prometheus
    if curl -f -s "$prometheus_url/api/v1/query?query=up" > /dev/null; then
        log_success "Prometheus –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_warning "Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É $prometheus_url"
        return 0  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ KServe –º–µ—Ç—Ä–∏–∫
    local kserve_metrics_query="kserve_model_request_duration_seconds"
    if curl -s "$prometheus_url/api/v1/query?query=$kserve_metrics_query" | grep -q "success"; then
        log_success "KServe –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è"
    else
        log_warning "KServe –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è)"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local ingress_url=${1:-"https://iris-classifier.ml.hashfoundry.local"}
    local model_name=${2:-"iris-classifier"}
    local namespace=${3:-"ml-models"}
    local prometheus_url=${4:-"http://prometheus.hashfoundry.local"}
    
    echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    echo "  - Ingress URL: $ingress_url"
    echo "  - Model Name: $model_name"
    echo "  - Namespace: $namespace"
    echo "  - Prometheus URL: $prometheus_url"
    echo ""
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    check_dependencies || exit 1
    check_infrastructure || exit 1
    check_inference_service "$namespace" "$model_name" || exit 1
    check_ingress "$ingress_url" "$model_name" || exit 1
    test_prediction "$ingress_url" "$model_name" || exit 1
    test_performance "$ingress_url" "$model_name" 10 || exit 1
    check_monitoring "$prometheus_url"
    
    echo ""
    log_success "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
    echo ""
    echo "üìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"
    echo "  ‚úÖ KServe –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "  ‚úÖ InferenceService —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∏ –≥–æ—Ç–æ–≤"
    echo "  ‚úÖ Ingress –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω"
    echo "  ‚úÖ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    echo "  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"
    echo "  ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    echo ""
    echo "üöÄ KServe ML Deployment —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –∑–∞–ø—É—Å–∫
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi

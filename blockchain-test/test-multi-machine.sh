#!/bin/bash

# üåê Multi-Machine Blockchain Connection Test Script
# Usage: ./test-multi-machine.sh [REMOTE_IP]

REMOTE_IP=${1:-"192.168.1.20"}
LOCAL_PORT=${2:-"9933"}
REMOTE_PORT=${3:-"9933"}

echo "üåê Multi-Machine Blockchain Connection Test"
echo "=========================================="
echo ""
echo "üîß Configuration:"
echo "   ‚Ä¢ Local node:  localhost:$LOCAL_PORT"
echo "   ‚Ä¢ Remote node: $REMOTE_IP:$REMOTE_PORT"
echo ""

# Test 1: Local node health
echo "üì° Test 1: Testing local node health..."
LOCAL_HEALTH=$(curl -s -H "Content-Type: application/json" \
     -d '{"id":1, "jsonrpc":"2.0", "method": "system_health", "params":[]}' \
     http://localhost:$LOCAL_PORT 2>/dev/null)

if [[ "$LOCAL_HEALTH" == *"peers"* ]]; then
    LOCAL_PEERS=$(echo "$LOCAL_HEALTH" | grep -o '"peers":[0-9]*' | grep -o '[0-9]*')
    echo "‚úÖ Local node is healthy"
    echo "   Peers: $LOCAL_PEERS"
    echo "   Response: $LOCAL_HEALTH"
else
    echo "‚ùå Local node is not responding"
    echo "üí° Make sure local blockchain is running: docker-compose up -d"
    exit 1
fi

echo ""

# Test 2: Remote node connectivity
echo "üì° Test 2: Testing remote node connectivity..."
REMOTE_HEALTH=$(curl -s -H "Content-Type: application/json" \
     -d '{"id":1, "jsonrpc":"2.0", "method": "system_health", "params":[]}' \
     http://$REMOTE_IP:$REMOTE_PORT 2>/dev/null)

if [[ "$REMOTE_HEALTH" == *"peers"* ]]; then
    REMOTE_PEERS=$(echo "$REMOTE_HEALTH" | grep -o '"peers":[0-9]*' | grep -o '[0-9]*')
    echo "‚úÖ Remote node is reachable"
    echo "   Peers: $REMOTE_PEERS"
    echo "   Response: $REMOTE_HEALTH"
else
    echo "‚ùå Remote node is not reachable"
    echo "üí° Check:"
    echo "   1. Remote blockchain is running"
    echo "   2. Firewall allows port $REMOTE_PORT"
    echo "   3. IP address $REMOTE_IP is correct"
    echo "   4. Network connectivity: ping $REMOTE_IP"
    exit 1
fi

echo ""

# Test 3: P2P connectivity check
echo "üîó Test 3: Checking P2P connectivity..."
if [[ "$LOCAL_PEERS" -gt 0 ]] && [[ "$REMOTE_PEERS" -gt 0 ]]; then
    echo "‚úÖ Both nodes have peers connected"
    echo "   Local peers: $LOCAL_PEERS"
    echo "   Remote peers: $REMOTE_PEERS"
    
    if [[ "$LOCAL_PEERS" == "1" ]] && [[ "$REMOTE_PEERS" == "1" ]]; then
        echo "üéâ Perfect! Both nodes are connected to each other"
    else
        echo "‚ö†Ô∏è  Multiple peers detected - this might be expected in larger networks"
    fi
else
    echo "‚ö†Ô∏è  P2P connection issue detected"
    echo "   Local peers: $LOCAL_PEERS"
    echo "   Remote peers: $REMOTE_PEERS"
    echo ""
    echo "üí° Troubleshooting:"
    echo "   1. Check bootnodes configuration in docker-compose.yml"
    echo "   2. Verify P2P port 30333 is open on both machines"
    echo "   3. Wait 1-2 minutes for P2P discovery to complete"
    echo "   4. Check logs: docker-compose logs -f"
fi

echo ""

# Test 4: Block synchronization
echo "üîó Test 4: Checking block synchronization..."
LOCAL_BLOCK=$(curl -s -H "Content-Type: application/json" \
     -d '{"id":1, "jsonrpc":"2.0", "method": "chain_getHeader", "params":[]}' \
     http://localhost:$LOCAL_PORT 2>/dev/null | grep -o '"number":"0x[^"]*"' | grep -o '0x[^"]*')

REMOTE_BLOCK=$(curl -s -H "Content-Type: application/json" \
     -d '{"id":1, "jsonrpc":"2.0", "method": "chain_getHeader", "params":[]}' \
     http://$REMOTE_IP:$REMOTE_PORT 2>/dev/null | grep -o '"number":"0x[^"]*"' | grep -o '0x[^"]*')

if [[ -n "$LOCAL_BLOCK" ]] && [[ -n "$REMOTE_BLOCK" ]]; then
    LOCAL_BLOCK_NUM=$((16#${LOCAL_BLOCK#0x}))
    REMOTE_BLOCK_NUM=$((16#${REMOTE_BLOCK#0x}))
    
    echo "üìä Block heights:"
    echo "   Local:  #$LOCAL_BLOCK_NUM ($LOCAL_BLOCK)"
    echo "   Remote: #$REMOTE_BLOCK_NUM ($REMOTE_BLOCK)"
    
    BLOCK_DIFF=$((LOCAL_BLOCK_NUM - REMOTE_BLOCK_NUM))
    if [[ $BLOCK_DIFF -lt 0 ]]; then
        BLOCK_DIFF=$((-BLOCK_DIFF))
    fi
    
    if [[ $BLOCK_DIFF -le 2 ]]; then
        echo "‚úÖ Blocks are synchronized (difference: $BLOCK_DIFF blocks)"
    else
        echo "‚ö†Ô∏è  Blocks are not synchronized (difference: $BLOCK_DIFF blocks)"
        echo "üí° This might indicate network issues or one node is behind"
    fi
else
    echo "‚ùå Could not retrieve block information"
fi

echo ""

# Test 5: Network latency
echo "üåê Test 5: Testing network latency..."
if command -v ping >/dev/null 2>&1; then
    echo "üì° Pinging $REMOTE_IP..."
    PING_RESULT=$(ping -c 3 $REMOTE_IP 2>/dev/null | tail -1)
    if [[ "$PING_RESULT" == *"avg"* ]]; then
        echo "‚úÖ Network connectivity OK"
        echo "   $PING_RESULT"
    else
        echo "‚ö†Ô∏è  Network connectivity issues"
        echo "üí° Check network connection to $REMOTE_IP"
    fi
else
    echo "‚ö†Ô∏è  ping command not available, skipping latency test"
fi

echo ""

# Summary
echo "üìã Multi-Machine Test Summary:"
echo "================================"

if [[ "$LOCAL_HEALTH" == *"peers"* ]] && [[ "$REMOTE_HEALTH" == *"peers"* ]]; then
    if [[ "$LOCAL_PEERS" -gt 0 ]] && [[ "$REMOTE_PEERS" -gt 0 ]]; then
        echo "üéâ SUCCESS: Multi-machine blockchain is working!"
        echo ""
        echo "‚úÖ Both nodes are healthy and connected"
        echo "‚úÖ P2P network is functional"
        echo "‚úÖ Blocks are being produced and synchronized"
        echo ""
        echo "üîó Connection details:"
        echo "   ‚Ä¢ Local node:  http://localhost:$LOCAL_PORT"
        echo "   ‚Ä¢ Remote node: http://$REMOTE_IP:$REMOTE_PORT"
        echo "   ‚Ä¢ P2P peers:   Local($LOCAL_PEERS) ‚Üî Remote($REMOTE_PEERS)"
        echo ""
        echo "üí° Next steps:"
        echo "   ‚Ä¢ Test transfers between Alice and Bob accounts"
        echo "   ‚Ä¢ Monitor logs: docker-compose logs -f"
        echo "   ‚Ä¢ Scale to more validators if needed"
    else
        echo "‚ö†Ô∏è  PARTIAL SUCCESS: Nodes are reachable but not fully connected"
        echo ""
        echo "‚úÖ Both nodes are responding to RPC calls"
        echo "‚ùå P2P connection needs troubleshooting"
        echo ""
        echo "üîß Troubleshooting steps:"
        echo "   1. Check firewall settings (port 30333)"
        echo "   2. Verify bootnodes configuration"
        echo "   3. Wait longer for P2P discovery"
        echo "   4. Check network connectivity"
    fi
else
    echo "‚ùå FAILURE: Multi-machine setup has issues"
    echo ""
    echo "üîß Check:"
    echo "   ‚Ä¢ Both blockchain nodes are running"
    echo "   ‚Ä¢ Network connectivity between machines"
    echo "   ‚Ä¢ Firewall settings"
    echo "   ‚Ä¢ Correct IP addresses and ports"
fi

echo ""
echo "üîç For detailed logs, run:"
echo "   docker-compose logs -f"
echo ""
echo "üìö For setup instructions, see:"
echo "   MULTI_MACHINE_DEPLOYMENT.md"
